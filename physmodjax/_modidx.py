# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/physmodjax',
                'doc_host': 'https://rodrigodzf.github.io',
                'git_url': 'https://github.com/rodrigodzf/physmodjax',
                'lib_path': 'physmodjax'},
  'syms': { 'physmodjax.models.autoencoders': {},
            'physmodjax.models.conv': { 'physmodjax.models.conv.ConvDecoder': ('models/conv.html#convdecoder', 'physmodjax/models/conv.py'),
                                        'physmodjax.models.conv.ConvDecoder.__call__': ( 'models/conv.html#convdecoder.__call__',
                                                                                         'physmodjax/models/conv.py'),
                                        'physmodjax.models.conv.ConvEncoder': ('models/conv.html#convencoder', 'physmodjax/models/conv.py'),
                                        'physmodjax.models.conv.ConvEncoder.__call__': ( 'models/conv.html#convencoder.__call__',
                                                                                         'physmodjax/models/conv.py'),
                                        'physmodjax.models.conv.ConvRelu2': ('models/conv.html#convrelu2', 'physmodjax/models/conv.py'),
                                        'physmodjax.models.conv.ConvRelu2.__call__': ( 'models/conv.html#convrelu2.__call__',
                                                                                       'physmodjax/models/conv.py'),
                                        'physmodjax.models.conv.DeConv3x3': ('models/conv.html#deconv3x3', 'physmodjax/models/conv.py'),
                                        'physmodjax.models.conv.DeConv3x3.__call__': ( 'models/conv.html#deconv3x3.__call__',
                                                                                       'physmodjax/models/conv.py'),
                                        'physmodjax.models.conv.DownsampleBlock': ( 'models/conv.html#downsampleblock',
                                                                                    'physmodjax/models/conv.py'),
                                        'physmodjax.models.conv.DownsampleBlock.__call__': ( 'models/conv.html#downsampleblock.__call__',
                                                                                             'physmodjax/models/conv.py'),
                                        'physmodjax.models.conv.UpsampleBlock': ( 'models/conv.html#upsampleblock',
                                                                                  'physmodjax/models/conv.py'),
                                        'physmodjax.models.conv.UpsampleBlock.__call__': ( 'models/conv.html#upsampleblock.__call__',
                                                                                           'physmodjax/models/conv.py')},
            'physmodjax.models.fno': { 'physmodjax.models.fno.FNO1D': ('models/fno.html#fno1d', 'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.FNO1D.__call__': ( 'models/fno.html#fno1d.__call__',
                                                                                 'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.FNO2D': ('models/fno.html#fno2d', 'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.FNO2D.__call__': ( 'models/fno.html#fno2d.__call__',
                                                                                 'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.FNO2D.advance': ('models/fno.html#fno2d.advance', 'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.FNO2D.setup': ('models/fno.html#fno2d.setup', 'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.SpectralConv1d': ( 'models/fno.html#spectralconv1d',
                                                                                 'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.SpectralConv1d.__call__': ( 'models/fno.html#spectralconv1d.__call__',
                                                                                          'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.SpectralConv1d.setup': ( 'models/fno.html#spectralconv1d.setup',
                                                                                       'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.SpectralConv2d': ( 'models/fno.html#spectralconv2d',
                                                                                 'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.SpectralConv2d.__call__': ( 'models/fno.html#spectralconv2d.__call__',
                                                                                          'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.SpectralConv2d.setup': ( 'models/fno.html#spectralconv2d.setup',
                                                                                       'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.SpectralLayers1d': ( 'models/fno.html#spectrallayers1d',
                                                                                   'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.SpectralLayers1d.__call__': ( 'models/fno.html#spectrallayers1d.__call__',
                                                                                            'physmodjax/models/fno.py'),
                                       'physmodjax.models.fno.SpectralLayers1d.setup': ( 'models/fno.html#spectrallayers1d.setup',
                                                                                         'physmodjax/models/fno.py')},
            'physmodjax.models.fno_rnn': { 'physmodjax.models.fno_rnn.BatchFNORNN': ( 'models/fno_rnn.html#batchfnornn',
                                                                                      'physmodjax/models/fno_rnn.py'),
                                           'physmodjax.models.fno_rnn.BatchFNORNN.__call__': ( 'models/fno_rnn.html#batchfnornn.__call__',
                                                                                               'physmodjax/models/fno_rnn.py'),
                                           'physmodjax.models.fno_rnn.FNOCell': ( 'models/fno_rnn.html#fnocell',
                                                                                  'physmodjax/models/fno_rnn.py'),
                                           'physmodjax.models.fno_rnn.FNOCell.__call__': ( 'models/fno_rnn.html#fnocell.__call__',
                                                                                           'physmodjax/models/fno_rnn.py'),
                                           'physmodjax.models.fno_rnn.FNORNN': ( 'models/fno_rnn.html#fnornn',
                                                                                 'physmodjax/models/fno_rnn.py'),
                                           'physmodjax.models.fno_rnn.FNORNN.__call__': ( 'models/fno_rnn.html#fnornn.__call__',
                                                                                          'physmodjax/models/fno_rnn.py')},
            'physmodjax.models.mlp': { 'physmodjax.models.mlp.MLP': ('models/mlp.html#mlp', 'physmodjax/models/mlp.py'),
                                       'physmodjax.models.mlp.MLP.__call__': ('models/mlp.html#mlp.__call__', 'physmodjax/models/mlp.py')},
            'physmodjax.models.recurrent': { 'physmodjax.models.recurrent.DeepRNN': ( 'models/recurrent.html#deeprnn',
                                                                                      'physmodjax/models/recurrent.py'),
                                             'physmodjax.models.recurrent.DeepRNN.__call__': ( 'models/recurrent.html#deeprnn.__call__',
                                                                                               'physmodjax/models/recurrent.py'),
                                             'physmodjax.models.recurrent.DeepRNN.setup': ( 'models/recurrent.html#deeprnn.setup',
                                                                                            'physmodjax/models/recurrent.py'),
                                             'physmodjax.models.recurrent.LRUDynamicsVarying': ( 'models/recurrent.html#lrudynamicsvarying',
                                                                                                 'physmodjax/models/recurrent.py'),
                                             'physmodjax.models.recurrent.LRUDynamicsVarying.__call__': ( 'models/recurrent.html#lrudynamicsvarying.__call__',
                                                                                                          'physmodjax/models/recurrent.py'),
                                             'physmodjax.models.recurrent.LRUDynamicsVarying.setup': ( 'models/recurrent.html#lrudynamicsvarying.setup',
                                                                                                       'physmodjax/models/recurrent.py')},
            'physmodjax.models.ssm': { 'physmodjax.models.ssm.LRU': ('models/ssm.html#lru', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.LRU.__call__': ('models/ssm.html#lru.__call__', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.LRU.setup': ('models/ssm.html#lru.setup', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.LRUDynamics': ('models/ssm.html#lrudynamics', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.LRUDynamics.__call__': ( 'models/ssm.html#lrudynamics.__call__',
                                                                                       'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.LRUDynamics.setup': ( 'models/ssm.html#lrudynamics.setup',
                                                                                    'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.S5SSM': ('models/ssm.html#s5ssm', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.S5SSM.__call__': ( 'models/ssm.html#s5ssm.__call__',
                                                                                 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.S5SSM.setup': ('models/ssm.html#s5ssm.setup', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.SequenceLayer': ('models/ssm.html#sequencelayer', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.SequenceLayer.__call__': ( 'models/ssm.html#sequencelayer.__call__',
                                                                                         'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.SequenceLayer.setup': ( 'models/ssm.html#sequencelayer.setup',
                                                                                      'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.StackedSSM': ('models/ssm.html#stackedssm', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.StackedSSM.__call__': ( 'models/ssm.html#stackedssm.__call__',
                                                                                      'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.StackedSSM.setup': ( 'models/ssm.html#stackedssm.setup',
                                                                                   'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.StackedSSM2D': ('models/ssm.html#stackedssm2d', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.StackedSSM2D.__call__': ( 'models/ssm.html#stackedssm2d.__call__',
                                                                                        'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.StackedSSM2D.setup': ( 'models/ssm.html#stackedssm2d.setup',
                                                                                     'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.apply_dynamics': ( 'models/ssm.html#apply_dynamics',
                                                                                 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.apply_lru_dynamics': ( 'models/ssm.html#apply_lru_dynamics',
                                                                                     'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.apply_lru_dynamics_from_ic': ( 'models/ssm.html#apply_lru_dynamics_from_ic',
                                                                                             'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.apply_ssm': ('models/ssm.html#apply_ssm', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.binary_operator': ( 'models/ssm.html#binary_operator',
                                                                                  'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.discretize_bilinear': ( 'models/ssm.html#discretize_bilinear',
                                                                                      'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.discretize_zoh': ( 'models/ssm.html#discretize_zoh',
                                                                                 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.gamma_log_init': ( 'models/ssm.html#gamma_log_init',
                                                                                 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.init_CV': ('models/ssm.html#init_cv', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.init_VinvB': ('models/ssm.html#init_vinvb', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.init_log_steps': ( 'models/ssm.html#init_log_steps',
                                                                                 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.log_step_initializer': ( 'models/ssm.html#log_step_initializer',
                                                                                       'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.make_DPLR_HiPPO': ( 'models/ssm.html#make_dplr_hippo',
                                                                                  'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.make_HiPPO': ('models/ssm.html#make_hippo', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.make_NPLR_HiPPO': ( 'models/ssm.html#make_nplr_hippo',
                                                                                  'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.matrix_init': ('models/ssm.html#matrix_init', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.nu_init': ('models/ssm.html#nu_init', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.theta_init': ('models/ssm.html#theta_init', 'physmodjax/models/ssm.py'),
                                       'physmodjax.models.ssm.trunc_standard_normal': ( 'models/ssm.html#trunc_standard_normal',
                                                                                        'physmodjax/models/ssm.py')},
            'physmodjax.scripts.dataset_generation': { 'physmodjax.scripts.dataset_generation.convert_to_single_file': ( 'scripts/dataset_generation.html#convert_to_single_file',
                                                                                                                         'physmodjax/scripts/dataset_generation.py'),
                                                       'physmodjax.scripts.dataset_generation.generate_dataset': ( 'scripts/dataset_generation.html#generate_dataset',
                                                                                                                   'physmodjax/scripts/dataset_generation.py'),
                                                       'physmodjax.scripts.dataset_generation.generate_run': ( 'scripts/dataset_generation.html#generate_run',
                                                                                                               'physmodjax/scripts/dataset_generation.py')},
            'physmodjax.scripts.train_rnn': { 'physmodjax.scripts.train_rnn.create_train_state': ( 'scripts/train_rnn.html#create_train_state',
                                                                                                   'physmodjax/scripts/train_rnn.py'),
                                              'physmodjax.scripts.train_rnn.train': ( 'scripts/train_rnn.html#train',
                                                                                      'physmodjax/scripts/train_rnn.py'),
                                              'physmodjax.scripts.train_rnn.train_rnn': ( 'scripts/train_rnn.html#train_rnn',
                                                                                          'physmodjax/scripts/train_rnn.py')},
            'physmodjax.solver.generator': { 'physmodjax.solver.generator.Gaussian': ( 'solver/impulse_generator.html#gaussian',
                                                                                       'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.Gaussian.__call__': ( 'solver/impulse_generator.html#gaussian.__call__',
                                                                                                'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.Gaussian.__init__': ( 'solver/impulse_generator.html#gaussian.__init__',
                                                                                                'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.Gaussian2d': ( 'solver/impulse_generator.html#gaussian2d',
                                                                                         'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.Gaussian2d.__call__': ( 'solver/impulse_generator.html#gaussian2d.__call__',
                                                                                                  'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.Gaussian2d.__init__': ( 'solver/impulse_generator.html#gaussian2d.__init__',
                                                                                                  'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.Generator': ( 'solver/impulse_generator.html#generator',
                                                                                        'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.Noise': ( 'solver/impulse_generator.html#noise',
                                                                                    'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.Noise.__call__': ( 'solver/impulse_generator.html#noise.__call__',
                                                                                             'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.Noise.__init__': ( 'solver/impulse_generator.html#noise.__init__',
                                                                                             'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.Noise2d': ( 'solver/impulse_generator.html#noise2d',
                                                                                      'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.Noise2d.__call__': ( 'solver/impulse_generator.html#noise2d.__call__',
                                                                                               'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.Noise2d.__init__': ( 'solver/impulse_generator.html#noise2d.__init__',
                                                                                               'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.NoiseBurst': ( 'solver/impulse_generator.html#noiseburst',
                                                                                         'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.NoiseBurst.__call__': ( 'solver/impulse_generator.html#noiseburst.__call__',
                                                                                                  'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.NoiseBurst.__init__': ( 'solver/impulse_generator.html#noiseburst.__init__',
                                                                                                  'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.SineMode': ( 'solver/impulse_generator.html#sinemode',
                                                                                       'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.SineMode.__call__': ( 'solver/impulse_generator.html#sinemode.__call__',
                                                                                                'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.SineMode.__init__': ( 'solver/impulse_generator.html#sinemode.__init__',
                                                                                                'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.create_pluck_modal': ( 'solver/impulse_generator.html#create_pluck_modal',
                                                                                                 'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.generate_initial_condition': ( 'solver/impulse_generator.html#generate_initial_condition',
                                                                                                         'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.make_pluck_hammer': ( 'solver/impulse_generator.html#make_pluck_hammer',
                                                                                                'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.raised_cosine_2d': ( 'solver/impulse_generator.html#raised_cosine_2d',
                                                                                               'physmodjax/solver/generator.py'),
                                             'physmodjax.solver.generator.raised_cosine_string': ( 'solver/impulse_generator.html#raised_cosine_string',
                                                                                                   'physmodjax/solver/generator.py')},
            'physmodjax.solver.wave1d_fe': { 'physmodjax.solver.wave1d_fe.Wave1dSolverFE': ( 'solver/wave1d_solver_fe.html#wave1dsolverfe',
                                                                                             'physmodjax/solver/wave1d_fe.py'),
                                             'physmodjax.solver.wave1d_fe.Wave1dSolverFE.__init__': ( 'solver/wave1d_solver_fe.html#wave1dsolverfe.__init__',
                                                                                                      'physmodjax/solver/wave1d_fe.py'),
                                             'physmodjax.solver.wave1d_fe.Wave1dSolverFE.solve': ( 'solver/wave1d_solver_fe.html#wave1dsolverfe.solve',
                                                                                                   'physmodjax/solver/wave1d_fe.py'),
                                             'physmodjax.solver.wave1d_fe.discretize': ( 'solver/wave1d_solver_fe.html#discretize',
                                                                                         'physmodjax/solver/wave1d_fe.py')},
            'physmodjax.solver.wave1d_modal': { 'physmodjax.solver.wave1d_modal.Wave1dSolverModal': ( 'solver/wave1d_solver_modal.html#wave1dsolvermodal',
                                                                                                      'physmodjax/solver/wave1d_modal.py'),
                                                'physmodjax.solver.wave1d_modal.Wave1dSolverModal.__init__': ( 'solver/wave1d_solver_modal.html#wave1dsolvermodal.__init__',
                                                                                                               'physmodjax/solver/wave1d_modal.py'),
                                                'physmodjax.solver.wave1d_modal.Wave1dSolverModal._calculate_mode_angular_frequencies': ( 'solver/wave1d_solver_modal.html#wave1dsolvermodal._calculate_mode_angular_frequencies',
                                                                                                                                          'physmodjax/solver/wave1d_modal.py'),
                                                'physmodjax.solver.wave1d_modal.Wave1dSolverModal._calculate_mode_coefficients': ( 'solver/wave1d_solver_modal.html#wave1dsolvermodal._calculate_mode_coefficients',
                                                                                                                                   'physmodjax/solver/wave1d_modal.py'),
                                                'physmodjax.solver.wave1d_modal.Wave1dSolverModal._calculate_mode_shapes': ( 'solver/wave1d_solver_modal.html#wave1dsolvermodal._calculate_mode_shapes',
                                                                                                                             'physmodjax/solver/wave1d_modal.py'),
                                                'physmodjax.solver.wave1d_modal.Wave1dSolverModal._calculate_mode_wavenumbers': ( 'solver/wave1d_solver_modal.html#wave1dsolvermodal._calculate_mode_wavenumbers',
                                                                                                                                  'physmodjax/solver/wave1d_modal.py'),
                                                'physmodjax.solver.wave1d_modal.Wave1dSolverModal._create_grid': ( 'solver/wave1d_solver_modal.html#wave1dsolvermodal._create_grid',
                                                                                                                   'physmodjax/solver/wave1d_modal.py'),
                                                'physmodjax.solver.wave1d_modal.Wave1dSolverModal.create_initial_conditions': ( 'solver/wave1d_solver_modal.html#wave1dsolvermodal.create_initial_conditions',
                                                                                                                                'physmodjax/solver/wave1d_modal.py'),
                                                'physmodjax.solver.wave1d_modal.Wave1dSolverModal.solve': ( 'solver/wave1d_solver_modal.html#wave1dsolvermodal.solve',
                                                                                                            'physmodjax/solver/wave1d_modal.py')},
            'physmodjax.solver.wave1d_pseudospectral': { 'physmodjax.solver.wave1d_pseudospectral.Wave1dSolverPseudoSpectral': ( 'solver/wave1d_solver_pseudospectral.html#wave1dsolverpseudospectral',
                                                                                                                                 'physmodjax/solver/wave1d_pseudospectral.py'),
                                                         'physmodjax.solver.wave1d_pseudospectral.Wave1dSolverPseudoSpectral.__init__': ( 'solver/wave1d_solver_pseudospectral.html#wave1dsolverpseudospectral.__init__',
                                                                                                                                          'physmodjax/solver/wave1d_pseudospectral.py'),
                                                         'physmodjax.solver.wave1d_pseudospectral.Wave1dSolverPseudoSpectral.solve': ( 'solver/wave1d_solver_pseudospectral.html#wave1dsolverpseudospectral.solve',
                                                                                                                                       'physmodjax/solver/wave1d_pseudospectral.py'),
                                                         'physmodjax.solver.wave1d_pseudospectral.fourier_derivative_2': ( 'solver/wave1d_solver_pseudospectral.html#fourier_derivative_2',
                                                                                                                           'physmodjax/solver/wave1d_pseudospectral.py')},
            'physmodjax.solver.wave1d_tenmod': { 'physmodjax.solver.wave1d_tenmod.Wave1dSolverTensionModulated': ( 'solver/wave1d_solver_tensionmodulated.html#wave1dsolvertensionmodulated',
                                                                                                                   'physmodjax/solver/wave1d_tenmod.py'),
                                                 'physmodjax.solver.wave1d_tenmod.Wave1dSolverTensionModulated.__init__': ( 'solver/wave1d_solver_tensionmodulated.html#wave1dsolvertensionmodulated.__init__',
                                                                                                                            'physmodjax/solver/wave1d_tenmod.py'),
                                                 'physmodjax.solver.wave1d_tenmod.Wave1dSolverTensionModulated.solve': ( 'solver/wave1d_solver_tensionmodulated.html#wave1dsolvertensionmodulated.solve',
                                                                                                                         'physmodjax/solver/wave1d_tenmod.py'),
                                                 'physmodjax.solver.wave1d_tenmod.nonlinear_string_func': ( 'solver/wave1d_solver_tensionmodulated.html#nonlinear_string_func',
                                                                                                            'physmodjax/solver/wave1d_tenmod.py')},
            'physmodjax.solver.wave2d_modal': { 'physmodjax.solver.wave2d_modal.WaveSolver2DJax': ( 'solver/wave2d_solver_modal.html#wavesolver2djax',
                                                                                                    'physmodjax/solver/wave2d_modal.py'),
                                                'physmodjax.solver.wave2d_modal.WaveSolver2DJax.__init__': ( 'solver/wave2d_solver_modal.html#wavesolver2djax.__init__',
                                                                                                             'physmodjax/solver/wave2d_modal.py'),
                                                'physmodjax.solver.wave2d_modal.WaveSolver2DJax.create_impulse': ( 'solver/wave2d_solver_modal.html#wavesolver2djax.create_impulse',
                                                                                                                   'physmodjax/solver/wave2d_modal.py'),
                                                'physmodjax.solver.wave2d_modal.WaveSolver2DJax.create_random_initial': ( 'solver/wave2d_solver_modal.html#wavesolver2djax.create_random_initial',
                                                                                                                          'physmodjax/solver/wave2d_modal.py'),
                                                'physmodjax.solver.wave2d_modal.WaveSolver2DJax.solve': ( 'solver/wave2d_solver_modal.html#wavesolver2djax.solve',
                                                                                                          'physmodjax/solver/wave2d_modal.py'),
                                                'physmodjax.solver.wave2d_modal.create_2d_wave_data': ( 'solver/wave2d_solver_modal.html#create_2d_wave_data',
                                                                                                        'physmodjax/solver/wave2d_modal.py')},
            'physmodjax.solver.wave2d_tenmod': { 'physmodjax.solver.wave2d_tenmod.Wave2dSolverTensionModulated': ( 'solver/wave2d_solver_tensionmodulated.html#wave2dsolvertensionmodulated',
                                                                                                                   'physmodjax/solver/wave2d_tenmod.py'),
                                                 'physmodjax.solver.wave2d_tenmod.Wave2dSolverTensionModulated.__init__': ( 'solver/wave2d_solver_tensionmodulated.html#wave2dsolvertensionmodulated.__init__',
                                                                                                                            'physmodjax/solver/wave2d_tenmod.py'),
                                                 'physmodjax.solver.wave2d_tenmod.Wave2dSolverTensionModulated.enforce_boundary_conditions': ( 'solver/wave2d_solver_tensionmodulated.html#wave2dsolvertensionmodulated.enforce_boundary_conditions',
                                                                                                                                               'physmodjax/solver/wave2d_tenmod.py'),
                                                 'physmodjax.solver.wave2d_tenmod.Wave2dSolverTensionModulated.nonlinear_membrane': ( 'solver/wave2d_solver_tensionmodulated.html#wave2dsolvertensionmodulated.nonlinear_membrane',
                                                                                                                                      'physmodjax/solver/wave2d_tenmod.py'),
                                                 'physmodjax.solver.wave2d_tenmod.Wave2dSolverTensionModulated.print_matrices': ( 'solver/wave2d_solver_tensionmodulated.html#wave2dsolvertensionmodulated.print_matrices',
                                                                                                                                  'physmodjax/solver/wave2d_tenmod.py'),
                                                 'physmodjax.solver.wave2d_tenmod.Wave2dSolverTensionModulated.print_solver_info': ( 'solver/wave2d_solver_tensionmodulated.html#wave2dsolvertensionmodulated.print_solver_info',
                                                                                                                                     'physmodjax/solver/wave2d_tenmod.py'),
                                                 'physmodjax.solver.wave2d_tenmod.Wave2dSolverTensionModulated.solve': ( 'solver/wave2d_solver_tensionmodulated.html#wave2dsolvertensionmodulated.solve',
                                                                                                                         'physmodjax/solver/wave2d_tenmod.py'),
                                                 'physmodjax.solver.wave2d_tenmod.Wave2dSolverTensionModulated.to_displacement': ( 'solver/wave2d_solver_tensionmodulated.html#wave2dsolvertensionmodulated.to_displacement',
                                                                                                                                   'physmodjax/solver/wave2d_tenmod.py'),
                                                 'physmodjax.solver.wave2d_tenmod.Wave2dSolverTensionModulated.to_modal': ( 'solver/wave2d_solver_tensionmodulated.html#wave2dsolvertensionmodulated.to_modal',
                                                                                                                            'physmodjax/solver/wave2d_tenmod.py')},
            'physmodjax.utils.checkpoint': { 'physmodjax.utils.checkpoint.download_ckpt_single_run': ( 'utils/checkpoint.html#download_ckpt_single_run',
                                                                                                       'physmodjax/utils/checkpoint.py'),
                                             'physmodjax.utils.checkpoint.restore_experiment_state': ( 'utils/checkpoint.html#restore_experiment_state',
                                                                                                       'physmodjax/utils/checkpoint.py')},
            'physmodjax.utils.data': { 'physmodjax.utils.data.DirectoryDataModule': ( 'utils/data.html#directorydatamodule',
                                                                                      'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.DirectoryDataModule.__init__': ( 'utils/data.html#directorydatamodule.__init__',
                                                                                               'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.DirectoryDataModule._parse_num_steps': ( 'utils/data.html#directorydatamodule._parse_num_steps',
                                                                                                       'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.DirectoryDataModule._standardize_data': ( 'utils/data.html#directorydatamodule._standardize_data',
                                                                                                        'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.DirectoryDataModule._windowed_data': ( 'utils/data.html#directorydatamodule._windowed_data',
                                                                                                     'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.DirectoryDataModule.get_info': ( 'utils/data.html#directorydatamodule.get_info',
                                                                                               'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.JaxDataloader': ('utils/data.html#jaxdataloader', 'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.JaxDataloader.__init__': ( 'utils/data.html#jaxdataloader.__init__',
                                                                                         'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.JaxDataloader.__iter__': ( 'utils/data.html#jaxdataloader.__iter__',
                                                                                         'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.JaxDataloader.__len__': ( 'utils/data.html#jaxdataloader.__len__',
                                                                                        'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.JaxDataloader.__next__': ( 'utils/data.html#jaxdataloader.__next__',
                                                                                         'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.JaxDataloader._reset': ( 'utils/data.html#jaxdataloader._reset',
                                                                                       'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.JaxDataloader.get_slices': ( 'utils/data.html#jaxdataloader.get_slices',
                                                                                           'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.create_grid': ('utils/data.html#create_grid', 'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.hankel_matrix': ('utils/data.html#hankel_matrix', 'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.is_list_like': ('utils/data.html#is_list_like', 'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.load_as_big_array': ( 'utils/data.html#load_as_big_array',
                                                                                    'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.make_rolling_windows': ( 'utils/data.html#make_rolling_windows',
                                                                                       'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.reshape_array': ('utils/data.html#reshape_array', 'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.select_slices': ('utils/data.html#select_slices', 'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.slice_tensor_multi': ( 'utils/data.html#slice_tensor_multi',
                                                                                     'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.slice_tensor_single': ( 'utils/data.html#slice_tensor_single',
                                                                                      'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.split_data': ('utils/data.html#split_data', 'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.split_xy': ('utils/data.html#split_xy', 'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.standardize': ('utils/data.html#standardize', 'physmodjax/utils/data.py'),
                                       'physmodjax.utils.data.unstandardize': ( 'utils/data.html#unstandardize',
                                                                                'physmodjax/utils/data.py')},
            'physmodjax.utils.filter': { 'physmodjax.utils.filter.NonLinearString': ( 'utils/filter.html#nonlinearstring',
                                                                                      'physmodjax/utils/filter.py'),
                                         'physmodjax.utils.filter.NonLinearString.__call__': ( 'utils/filter.html#nonlinearstring.__call__',
                                                                                               'physmodjax/utils/filter.py'),
                                         'physmodjax.utils.filter.NonLinearString.setup': ( 'utils/filter.html#nonlinearstring.setup',
                                                                                            'physmodjax/utils/filter.py'),
                                         'physmodjax.utils.filter.NonLinearStringCellAvanzini': ( 'utils/filter.html#nonlinearstringcellavanzini',
                                                                                                  'physmodjax/utils/filter.py'),
                                         'physmodjax.utils.filter.NonLinearStringCellAvanzini.__call__': ( 'utils/filter.html#nonlinearstringcellavanzini.__call__',
                                                                                                           'physmodjax/utils/filter.py'),
                                         'physmodjax.utils.filter.NonLinearStringCellAvanzini.setup': ( 'utils/filter.html#nonlinearstringcellavanzini.setup',
                                                                                                        'physmodjax/utils/filter.py')},
            'physmodjax.utils.ftm': { 'physmodjax.utils.ftm.CircularDrumHeadParameters': ( 'utils/ftm.html#circulardrumheadparameters',
                                                                                           'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.CircularDrumHeadParameters.avanzini': ( 'utils/ftm.html#circulardrumheadparameters.avanzini',
                                                                                                    'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.CircularDrumHeadParameters.surface_density': ( 'utils/ftm.html#circulardrumheadparameters.surface_density',
                                                                                                           'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.PlateParameters': ('utils/ftm.html#plateparameters', 'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.PlateParameters.surface_density': ( 'utils/ftm.html#plateparameters.surface_density',
                                                                                                'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.StringParameters': ( 'utils/ftm.html#stringparameters',
                                                                                 'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.StringParameters.area_density': ( 'utils/ftm.html#stringparameters.area_density',
                                                                                              'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.StringParameters.bass_string': ( 'utils/ftm.html#stringparameters.bass_string',
                                                                                             'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.StringParameters.guitar_string_B_schafer': ( 'utils/ftm.html#stringparameters.guitar_string_b_schafer',
                                                                                                         'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.StringParameters.guitar_string_D': ( 'utils/ftm.html#stringparameters.guitar_string_d',
                                                                                                 'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.StringParameters.piano_string': ( 'utils/ftm.html#stringparameters.piano_string',
                                                                                              'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.dblintegral': ('utils/ftm.html#dblintegral', 'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.drumhead_eigenfunctions': ( 'utils/ftm.html#drumhead_eigenfunctions',
                                                                                        'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.drumhead_eigenvalues': ( 'utils/ftm.html#drumhead_eigenvalues',
                                                                                     'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.drumhead_wavenumbers': ( 'utils/ftm.html#drumhead_wavenumbers',
                                                                                     'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.eigenvalues_from_drumhead_pde': ( 'utils/ftm.html#eigenvalues_from_drumhead_pde',
                                                                                              'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.eigenvalues_from_pde': ( 'utils/ftm.html#eigenvalues_from_pde',
                                                                                     'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.eigenvalues_from_plate_pde': ( 'utils/ftm.html#eigenvalues_from_plate_pde',
                                                                                           'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.forward_STL': ('utils/ftm.html#forward_stl', 'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.forward_STL_2d': ('utils/ftm.html#forward_stl_2d', 'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.forward_STL_drumhead': ( 'utils/ftm.html#forward_stl_drumhead',
                                                                                     'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.inverse_STL': ('utils/ftm.html#inverse_stl', 'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.inverse_STL_2d': ('utils/ftm.html#inverse_stl_2d', 'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.inverse_STL_drumhead': ( 'utils/ftm.html#inverse_stl_drumhead',
                                                                                     'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.plate_eigenfunctions': ( 'utils/ftm.html#plate_eigenfunctions',
                                                                                     'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.plate_eigenvalues': ( 'utils/ftm.html#plate_eigenvalues',
                                                                                  'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.plate_wavenumbers': ( 'utils/ftm.html#plate_wavenumbers',
                                                                                  'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.sample_parallel_tf': ( 'utils/ftm.html#sample_parallel_tf',
                                                                                   'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.string_eigenfunctions': ( 'utils/ftm.html#string_eigenfunctions',
                                                                                      'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.string_eigenvalues_sqrt': ( 'utils/ftm.html#string_eigenvalues_sqrt',
                                                                                        'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.tf_excitation_continuous': ( 'utils/ftm.html#tf_excitation_continuous',
                                                                                         'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.tf_excitation_discrete': ( 'utils/ftm.html#tf_excitation_discrete',
                                                                                       'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.tf_initial_conditions_continuous': ( 'utils/ftm.html#tf_initial_conditions_continuous',
                                                                                                 'physmodjax/utils/ftm.py'),
                                      'physmodjax.utils.ftm.tf_initial_conditions_discrete': ( 'utils/ftm.html#tf_initial_conditions_discrete',
                                                                                               'physmodjax/utils/ftm.py')},
            'physmodjax.utils.linear': { 'physmodjax.utils.linear.fast_predict': ( 'utils/linear.html#fast_predict',
                                                                                   'physmodjax/utils/linear.py'),
                                         'physmodjax.utils.linear.fit_dmd_to_sample': ( 'utils/linear.html#fit_dmd_to_sample',
                                                                                        'physmodjax/utils/linear.py'),
                                         'physmodjax.utils.linear.get_linear_approximation': ( 'utils/linear.html#get_linear_approximation',
                                                                                               'physmodjax/utils/linear.py'),
                                         'physmodjax.utils.linear.get_linear_model': ( 'utils/linear.html#get_linear_model',
                                                                                       'physmodjax/utils/linear.py'),
                                         'physmodjax.utils.linear.hankelize': ('utils/linear.html#hankelize', 'physmodjax/utils/linear.py'),
                                         'physmodjax.utils.linear.set_params_from_linear': ( 'utils/linear.html#set_params_from_linear',
                                                                                             'physmodjax/utils/linear.py'),
                                         'physmodjax.utils.linear.sort_eigvals_eigvecs': ( 'utils/linear.html#sort_eigvals_eigvecs',
                                                                                           'physmodjax/utils/linear.py')},
            'physmodjax.utils.losses': { 'physmodjax.utils.losses.db_mag_loss': ( 'utils/losses.html#db_mag_loss',
                                                                                  'physmodjax/utils/losses.py'),
                                         'physmodjax.utils.losses.fft_loss': ('utils/losses.html#fft_loss', 'physmodjax/utils/losses.py'),
                                         'physmodjax.utils.losses.lindyn_loss': ( 'utils/losses.html#lindyn_loss',
                                                                                  'physmodjax/utils/losses.py'),
                                         'physmodjax.utils.losses.log_mag': ('utils/losses.html#log_mag', 'physmodjax/utils/losses.py'),
                                         'physmodjax.utils.losses.log_mag_loss': ( 'utils/losses.html#log_mag_loss',
                                                                                   'physmodjax/utils/losses.py'),
                                         'physmodjax.utils.losses.mse_loss': ('utils/losses.html#mse_loss', 'physmodjax/utils/losses.py'),
                                         'physmodjax.utils.losses.spectral_convergence_loss': ( 'utils/losses.html#spectral_convergence_loss',
                                                                                                'physmodjax/utils/losses.py'),
                                         'physmodjax.utils.losses.to_db': ('utils/losses.html#to_db', 'physmodjax/utils/losses.py')},
            'physmodjax.utils.metrics': { 'physmodjax.utils.metrics.absolute_error': ( 'utils/metrics.html#absolute_error',
                                                                                       'physmodjax/utils/metrics.py'),
                                          'physmodjax.utils.metrics.accumulate_metrics': ( 'utils/metrics.html#accumulate_metrics',
                                                                                           'physmodjax/utils/metrics.py'),
                                          'physmodjax.utils.metrics.mae': ('utils/metrics.html#mae', 'physmodjax/utils/metrics.py'),
                                          'physmodjax.utils.metrics.mae_relative': ( 'utils/metrics.html#mae_relative',
                                                                                     'physmodjax/utils/metrics.py'),
                                          'physmodjax.utils.metrics.mse': ('utils/metrics.html#mse', 'physmodjax/utils/metrics.py'),
                                          'physmodjax.utils.metrics.mse_relative': ( 'utils/metrics.html#mse_relative',
                                                                                     'physmodjax/utils/metrics.py'),
                                          'physmodjax.utils.metrics.squared_error': ( 'utils/metrics.html#squared_error',
                                                                                      'physmodjax/utils/metrics.py')},
            'physmodjax.utils.modal': { 'physmodjax.utils.modal.create_modal_matrix': ( 'utils/modal.html#create_modal_matrix',
                                                                                        'physmodjax/utils/modal.py'),
                                        'physmodjax.utils.modal.create_pluck_modal': ( 'utils/modal.html#create_pluck_modal',
                                                                                       'physmodjax/utils/modal.py'),
                                        'physmodjax.utils.modal.to_displacement': ( 'utils/modal.html#to_displacement',
                                                                                    'physmodjax/utils/modal.py'),
                                        'physmodjax.utils.modal.to_modal': ('utils/modal.html#to_modal', 'physmodjax/utils/modal.py')},
            'physmodjax.utils.plot': { 'physmodjax.utils.plot.ewma_vectorized': ( 'utils/plot.html#ewma_vectorized',
                                                                                  'physmodjax/utils/plot.py'),
                                       'physmodjax.utils.plot.ewma_vectorized_2d': ( 'utils/plot.html#ewma_vectorized_2d',
                                                                                     'physmodjax/utils/plot.py'),
                                       'physmodjax.utils.plot.ewma_vectorized_safe': ( 'utils/plot.html#ewma_vectorized_safe',
                                                                                       'physmodjax/utils/plot.py'),
                                       'physmodjax.utils.plot.get_max_row_size': ( 'utils/plot.html#get_max_row_size',
                                                                                   'physmodjax/utils/plot.py'),
                                       'physmodjax.utils.plot.plot_eigenvalues': ( 'utils/plot.html#plot_eigenvalues',
                                                                                   'physmodjax/utils/plot.py'),
                                       'physmodjax.utils.plot.plot_freqz': ('utils/plot.html#plot_freqz', 'physmodjax/utils/plot.py'),
                                       'physmodjax.utils.plot.plot_poles_zeros': ( 'utils/plot.html#plot_poles_zeros',
                                                                                   'physmodjax/utils/plot.py'),
                                       'physmodjax.utils.plot.plot_solution': ('utils/plot.html#plot_solution', 'physmodjax/utils/plot.py'),
                                       'physmodjax.utils.plot.plot_solution_2d': ( 'utils/plot.html#plot_solution_2d',
                                                                                   'physmodjax/utils/plot.py')}}}
